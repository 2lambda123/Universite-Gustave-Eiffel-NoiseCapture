DROP TABLE IF EXISTS NOISECAPTURE_FREQ, NOISECAPTURE_POINT, NOISECAPTURE_TRACK, NOISECAPTURE_USER,
 NOISECAPTURE_CALIBRATE, NOISECAPTURE_TAG, NOISECAPTURE_TRACK_TAG, NOISECAPTURE_AREA, NOISECAPTURE_PROCESS_QUEUE;

-- tables

-- Table: NOISECAPTURE_FREQ
CREATE TABLE NOISECAPTURE_FREQ (
    PK_POINT int  NOT NULL,
    FREQUENCY smallint  NOT NULL,
    NOISE_LEVEL float NOT NULL   ,
    CONSTRAINT NOISECAPTURE_FREQ_PK PRIMARY KEY (PK_POINT, FREQUENCY) 
);

COMMENT ON COLUMN NOISECAPTURE_FREQ.FREQUENCY IS 'Frequency Hz';
COMMENT ON COLUMN NOISECAPTURE_FREQ.NOISE_LEVEL IS 'Sound level in dB(A)';

-- Table: NOISECAPTURE_POINT
CREATE TABLE NOISECAPTURE_POINT (
    PK_POINT serial NOT NULL,
    THE_GEOM geometry,
    PK_TRACK int NOT NULL,
    NOISE_LEVEL float  NOT NULL,
    SPEED float,
    ACCURACY float  NOT NULL,
    ORIENTATION float,
    TIME_DATE timestamp  NOT NULL,
	TIME_LOCATION timestamp,
    CONSTRAINT NOISECAPTURE_POINT_PK PRIMARY KEY (PK_POINT)
);

COMMENT ON COLUMN NOISECAPTURE_POINT.ORIENTATION IS 'Device movement bearing, may be null';
COMMENT ON COLUMN NOISECAPTURE_POINT.TIME_LOCATION IS 'Time of acquisition of the localisation';
COMMENT ON COLUMN NOISECAPTURE_POINT.TIME_DATE IS 'Time of the noise level measurement';
COMMENT ON COLUMN NOISECAPTURE_POINT.SPEED IS 'Device speed in m/s. May be null';
COMMENT ON COLUMN NOISECAPTURE_POINT.ACCURACY IS 'Estimated location accuracy in meter';
COMMENT ON COLUMN NOISECAPTURE_POINT.NOISE_LEVEL IS 'Sound level in dB(A)';

-- Table: NOISECAPTURE_TRACK
CREATE TABLE NOISECAPTURE_TRACK (
    PK_TRACK serial  NOT NULL,
    PK_USER int  NOT NULL,
    TRACK_UUID char(36)  NOT NULL,
	VERSION_NUMBER int NOT NULL,
	RECORD_UTC timestamp NOT NULL,
	PLEASANTNESS float,
	DEVICE_PRODUCT text  NOT NULL,
	DEVICE_MODEL text NOT NULL,
	DEVICE_MANUFACTURER text NOT NULL,
	NOISE_LEVEL float NOT NULL,
	TIME_LENGTH float NOT NULL,
	GAIN_CALIBRATION float NOT NULL DEFAULT 0,
    CONSTRAINT NOISECAPTURE_TRACK_PK PRIMARY KEY (PK_TRACK)
);

COMMENT ON COLUMN NOISECAPTURE_TRACK.NOISE_LEVEL IS 'Sound level in dB(A)';
COMMENT ON COLUMN NOISECAPTURE_TRACK.VERSION_NUMBER IS 'Application version identifier';
COMMENT ON COLUMN NOISECAPTURE_TRACK.PLEASANTNESS IS 'PLEASANTNESS ratio, from -1 unpleasant to 1 pleasant';
COMMENT ON COLUMN NOISECAPTURE_TRACK.GAIN_CALIBRATION IS 'Signal gain in dB, provided from user using phone calibration';


-- Table: NOISECAPTURE_USER
CREATE TABLE NOISECAPTURE_USER (
    PK_USER serial  NOT NULL,
    USER_UUID char(36)  NOT NULL,
    PSEUDO text,	
    DATE_CREATION date  NOT NULL,
    CONSTRAINT NOISECAPTURE_USER_PK PRIMARY KEY (PK_USER)
);

CREATE TABLE NOISECAPTURE_TAG (
    PK_TAG serial  NOT NULL,
	TAG_NAME text NOT NULL
);

CREATE TABLE NOISECAPTURE_TRACK_TAG (
    PK_TRACK int NOT NULL,
    PK_TAG int NOT NULL   ,
    CONSTRAINT NOISECAPTURE_TRACK_TAG_PK PRIMARY KEY (PK_TRACK, PK_TAG)
);


-- Table: NOISECAPTURE_PROCESS_QUEUE, tracks inserted but not processed for community map
CREATE TABLE NOISECAPTURE_PROCESS_QUEUE (
    PK_TRACK int NOT NULL
);

-- Table: NOISECAPTURE_AREA, Post-processed results, merge of measurements in a regular area
CREATE TABLE NOISECAPTURE_AREA (
    PK_AREA serial  NOT NULL,
    CELL_Q long NOT NULL,
    CELL_R long NOT NULL,
    THE_GEOM POLYGON NOT NULL,
    MEAN_LEQ float NOT NULL,
	MEAN_PLEASANTNESS float,
    MEASURE_COUNT int NOT NULL,
    FIRST_MEASURE timestamp NOT NULL,
    LAST_MEASURE timestamp NOT NULL,
    CONSTRAINT NOISECAPTURE_AREA_PK PRIMARY KEY (PK_AREA)
);

COMMENT ON COLUMN NOISECAPTURE_AREA.CELL_Q IS 'Hexagonal index Q';
COMMENT ON COLUMN NOISECAPTURE_AREA.CELL_R IS 'Hexagonal index R';
COMMENT ON COLUMN NOISECAPTURE_AREA.POLYGON IS 'Area shape';
COMMENT ON COLUMN NOISECAPTURE_AREA.MEASURE_COUNT IS 'noisecapture_point entities in this area';

--- Ajout des clés étangeres


CREATE INDEX ki_noisecapture_area_cellq
  ON noisecapture_area(cell_q);
CREATE INDEX ki_noisecapture_area_cellr
  ON noisecapture_area(cell_r);

ALTER TABLE noisecapture_track
  ADD CONSTRAINT noisecapture_track_pk_user_fk FOREIGN KEY (pk_user) REFERENCES noisecapture_user (pk_user)
   ON UPDATE CASCADE ON DELETE CASCADE;
CREATE INDEX fki_noisecapture_track_pk_user_fk
  ON noisecapture_track(pk_user);


  ALTER TABLE noisecapture_point
  ADD CONSTRAINT noisecapture_point_pk_track_fk FOREIGN KEY (pk_track) REFERENCES noisecapture_track (pk_track)
   ON UPDATE CASCADE ON DELETE CASCADE;
CREATE INDEX fki_noisecapture_point_pk_track_fk
  ON noisecapture_point(pk_track);


  ALTER TABLE noisecapture_process_queue
  ADD CONSTRAINT noisecapture_process_queue_pk_track_fk FOREIGN KEY (pk_track) REFERENCES noisecapture_track (pk_track)
   ON UPDATE CASCADE ON DELETE CASCADE;
CREATE INDEX fki_noisecapture_process_queue_pk_track_fk
  ON noisecapture_process_queue(pk_track);

  ALTER TABLE noisecapture_freq
  ADD CONSTRAINT noisecapture_freq_pk_point_fk FOREIGN KEY (pk_point) REFERENCES noisecapture_point (pk_point)
   ON UPDATE CASCADE ON DELETE CASCADE;
CREATE INDEX fki_noisecapture_freq_pk_point_fk
  ON noisecapture_freq(pk_point);

    ALTER TABLE NOISECAPTURE_CALIBRATE
  ADD CONSTRAINT NOISECAPTURE_CALIBRATE_pk_track_fk FOREIGN KEY (pk_track) REFERENCES noisecapture_track (pk_track)
   ON UPDATE CASCADE ON DELETE CASCADE;
CREATE INDEX fki_NOISECAPTURE_CALIBRATE_pk_track_fk
  ON NOISECAPTURE_CALIBRATE(pk_track);


    ALTER TABLE NOISECAPTURE_TRACK_TAG
  ADD CONSTRAINT NOISECAPTURE_TRACK_TAG_pk_track_fk FOREIGN KEY (pk_track) REFERENCES noisecapture_track (pk_track)
   ON UPDATE CASCADE ON DELETE CASCADE;