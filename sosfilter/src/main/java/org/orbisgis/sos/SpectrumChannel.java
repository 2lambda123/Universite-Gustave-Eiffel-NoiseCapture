package org.orbisgis.sos;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class SpectrumChannel {
    private int subsampling_ratio;
    private int minimum_samples_length;
    private List<BiquadFilter> subSamplers = new ArrayList<>();
    // Cascaded filters are placed here, each element will take less and less samples as input
    private List<HashMap<Integer, BiquadFilter>> iirFilters;

    public SpectrumChannel() {
    }

    private double[] toArray(List<Double> array) {
        double[] retvalue = new double[array.size()];
        for(int i=0; i<retvalue.length; i++) {
            retvalue[i] = array.get(i);
        }
        return retvalue;
    }

    /**
     * Load configuration generated by filterdesign.py
     * @param jsonConfiguration
     * @param useCascade Reduce computation time by subsampling the audio
     * @throws IOException
     */
    public void loadConfiguration(ConfigurationSpectrumChannel configuration, boolean useCascade) throws IOException {
        if(!configuration.getBandpass().isEmpty()) {
            int maxSubsampling = 0;
            if(useCascade) {
                for (ConfigurationBiquad biquad : configuration.getBandpass()) {
                    maxSubsampling = Math.max(maxSubsampling, biquad.getSubsamplingDepth());
                }
            }
            iirFilters = new ArrayList<>();
            subsampling_ratio = configuration.getAntiAliasing().getSampleRatio();
            minimum_samples_length = (int)Math.pow(subsampling_ratio, maxSubsampling);
            ConfigurationSos filterConf = configuration.getAntiAliasing();
            for(int i = 0; i < maxSubsampling; i++) {
                BiquadFilter filter = new BiquadFilter(toArray(filterConf.getB0()),
                        toArray(filterConf.getB1()),
                        toArray(filterConf.getB2()),
                        toArray(filterConf.getA1()),
                        toArray(filterConf.getA2()));
                subSamplers.add(filter);
            }
            for (int i = 0; i < configuration.getBandpass().size(); i++) {
                ConfigurationBiquad biquad = configuration.getBandpass().get(i);
                ConfigurationSos refFilter;
                if(useCascade) {
                    refFilter = biquad.getSubsamplingFilter().getSos();
                } else {
                    refFilter = biquad.getSos();
                }
                BiquadFilter filter = new BiquadFilter(toArray(refFilter.getB0()),
                        toArray(refFilter.getB1()),
                        toArray(refFilter.getB2()),
                        toArray(refFilter.getA1()),
                        toArray(refFilter.getA2()));
                if(useCascade) {
                    iirFilters.get(biquad.getSubsamplingDepth()).put(i, filter);
                } else {
                    iirFilters.get(0).put(i, filter);
                }
            }
        }
    }
}
